module coupling_atm_model_mod

    use CCPL_interface_mod
    
    implicit none
    
    integer, private, parameter           :: RKIND = 4
    integer, private                      :: decomp_id, grid_h2d_id
    integer, public                       :: ocn_demo_comp_id
    integer, allocatable, public          :: mask_land(:)
    real(kind=RKIND), allocatable, public :: psl(:), ts(:), flds(:), fsds(:)    
    
    
contains

    subroutine register_ocn_demo_component(comm)

        use CCPL_interface_mod
        integer, intent(inout) :: comm
        ocn_demo_comp_id = CCPL_register_component(-1, "ocn_demo", "ocn", comm, change_dir=.True., annotation = "register ocn model ocn_demo")
    end subroutine register_ocn_demo_component

    subroutine register_grids_decomps(nlat, nlon, lat, lon, decomp_size, local_id, npes, local_grid_cell_index)

        use CCPL_interface_mod

        implicit none
        integer, intent(in) :: nlat, nlon
        integer, intent(in) :: decomp_size, local_id, npes
        integer, intent(in) :: local_grid_cell_index(decomp_size, npes)
        real(kind=RKIND), intent(in) :: lat(nlat), lon(nlon)

        grid_h2d_id = CCPL_register_H2D_grid_via_global_data(ocn_demo_comp_id, "ocn_demo_H2D_grid", "LON_LAT", "degrees", "cyclic", nlon, nlat, 0.0, 360.0, -90.0, 90.0, lon, lat, annotation="register gamil H2D grid")
        decomp_id = CCPL_register_normal_parallel_decomp("decomp_ocn_demo_grid", grid_H2D_id, decomp_size, local_grid_cell_index(:,local_id+1), "allocate for ocn_demo grid")
    end subroutine register_grids_decomps

    subroutine register_component_coupling_configuration(decomp_size, sst, shf, ssh, mld, &
            time_step, comp_id, comp_name, import_interface_id, export_interface_id)

        use CCPL_interface_mod

        implicit none

        integer, intent(in)          :: decomp_size
        real(kind=RKIND), intent(in) :: sst(decomp_size), shf(decomp_size), ssh(decomp_size), mld(decomp_size)
        character(len=*), intent(in) :: comp_name
        integer, intent(inout)       :: comp_id
        integer, intent(out)         :: export_interface_id, import_interface_id
        character*1024               :: annotation
        integer                      :: time_step, timer_id, fields_id(5)
        integer                      :: field_id_psl, field_id_ts, field_id_flds, field_id_fsds
        integer                      :: field_id_sst, field_id_ssh, field_id_shf, field_id_mld

        !----------------register time step to C-Coupler2--------------------------------------
        call CCPL_set_normal_time_step(ocn_demo_comp_id, time_step, annotation="setting the time step for ocn_demo")
        !----------------register field instances to C-Coupler2--------------------------------
        allocate(psl(decomp_size))
        allocate(ts(decomp_size))
        allocate(flds(decomp_size))
        allocate(fsds(decomp_size))
        field_id_psl = CCPL_register_field_instance(psl(1:decomp_size), "psl", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="Pa", annotation="register field instance of Sea level pressure") 
        field_id_ts = CCPL_register_field_instance(ts(1:decomp_size), "ts", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="K", annotation="register field instance of Surface temperature")
        field_id_fsds = CCPL_register_field_instance(fsds(1:decomp_size), "fsds", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="W/m2", annotation="register field instance of Short wave downward flux at surface")
        field_id_flds  = CCPL_register_field_instance(flds(1:decomp_size), "flds", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="W/m2", annotation="register field instance of Long wave downward flux at surface")
        field_id_sst  = CCPL_register_field_instance(sst, "sst", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="C", annotation="register field instance of Sea surface temperature")
        field_id_shf  = CCPL_register_field_instance(shf, "shf", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="W/m2", annotation="register field instance of Net surface heat flux")
        field_id_ssh = CCPL_register_field_instance(ssh, "ssh", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="m", annotation="register field instance of Sea surface height")
        field_id_mld = CCPL_register_field_instance(mld, "mld", decomp_id, grid_h2d_id, 0, usage_tag=CCPL_TAG_CPL_REST, field_unit="m", annotation="register field instance of Mixed layer depth")
        !----------------register coupling timers to C-Coupler2--------------------------------
        timer_id = CCPL_define_single_timer(ocn_demo_comp_id, "steps", 1, 0, 0, annotation="define a single timer for comp_id_ocn_demo")
        !----------------register export interface to C-Coupler2--------------------------------
        fields_id(1) = field_id_sst
        fields_id(2) = field_id_shf
        fields_id(3) = field_id_ssh
        fields_id(4) = field_id_mld
        export_interface_id = CCPL_register_export_interface("send_data_to_atm", 4, fields_id, timer_id, annotation="register interface for sending data to atmosphere")

        fields_id(1) = field_id_psl
        fields_id(2) = field_id_ts
        fields_id(3) = field_id_fsds
        fields_id(4) = field_id_flds
        import_interface_id = CCPL_register_import_interface("receive_data_from_atm", 4, fields_id, timer_id, 0, annotation="register interface for receiving data from atmosphere")
        call CCPL_do_individual_coupling_generation(comp_id, annotation= "component "//comp_name//" generates the coupling procedure")
        call CCPL_end_coupling_configuration(comp_id, annotation = "componnent "//comp_name//" ends registration")

    end subroutine register_component_coupling_configuration
    
end module coupling_atm_model_mod
